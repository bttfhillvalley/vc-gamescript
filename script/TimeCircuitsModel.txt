{$USE CLEO}
// TODO: Change this to be car specific
// 4@ = Y1
// 5@ = Y2
// 6@ = Y3
// 7@ = Y4
// 8@ = TCD Handle
// 9@ = H1
// 10@ = H2
// 11@ = M1
// 12@ = M2
// 13@ = MONTH
// 14@ = D1
// 15@ = D2

:TimeCircuitsModel
thread 'TC_MOD'
1@ = 0.0 //tcd switch and needles in the dash in front of the passenger seat

:TimeCircuitsModelStart
wait 10
if
   not Car.Wrecked($DELOREAN)
jf @TimeCircuitsModelStart
008B: 0@ = $DELOREAN // integer values and handles
//first, hide all components / put them to base configuration
gosub @TimeCircuitsModelReset
if or
  $TCON == 0 // integer values
  $FRIED == 1 // integer values
jf @TimeCircuitsModelTurnOn

if
    1@ > 0.0
then
    1@ -= 10.0
    gosub @TimeCircuitsSwitchModel
end
jump @TimeCircuitsModelStart

:TimeCircuitsModelTurnOn
//change the lights behind the tcd switch to on and fall through to handling the tcd
//this is not necessary for the off case because it's done in @TimeCircuitsModelReset
3F10: set_car 0@ component "tcdswitchlighton" visible 1
3F10: set_car 0@ component "tcdswitchlightoff" visible 0
3F10: set_car 0@ component "tcdkeypadlightson" visible 1
3F10: set_car 0@ component "gloveboxgaugeslights" visible 1

//rotate the components up to 60.0 degrees towards on position
if
    1@ < 60.0
then
    1@ += 10.0
    gosub @TimeCircuitsSwitchModel
end

//Destination time
2@ = 0
008B: 4@ = $MONTH // integer values and handles
008B: 5@ = $DAY // integer values and handles
008B: 6@ = $YEAR // integer values and handles
008B: 7@ = $HOUR // integer values and handles
008B: 8@ = $MINUTE // integer values and handles
0B10: 15@ = $FLASH AND 0x8
if
    15@ == 0
then
    05F5: call_scm_func @TimeCircuitsModelMonth params_count 5 0@ 0 2@ 0 4@
end
0B10: 15@ = $FLASH AND 0x4
if
    15@ == 0
then
    05F5: call_scm_func @TimeCircuitsModelDay params_count 5 0@ 0 2@ 0 5@
end
0B10: 15@ = $FLASH AND 0x2
if
    15@ == 0
then
    05F5: call_scm_func @TimeCircuitsModelYear params_count 5 0@ 0 2@ 0 6@
end
0B10: 15@ = $FLASH AND 0x1
if
    15@ == 0
then
    05F5: call_scm_func @TimeCircuitsModelHour params_count 5 0@ 0 2@ 0 7@
    05F5: call_scm_func @TimeCircuitsModelMinute params_count 5 0@ 0 2@ 0 8@
end

//Present time
2@ = 1
008B: 4@ = $CMONTH // integer values and handles
008B: 5@ = $CDAY // integer values and handles
008B: 6@ = $CYEAR // integer values and handles
00BF: 7@ = current_time_hours, 8@ = current_time_minutes
gosub @TimeCircuitsModelDisplay

//Last Time Departed
2@ = 2
008B: 4@ = $PTIME
if
   not 4@ == -1 // integer values
then
    008B: 5@ = $PTIME // integer values and handles
    008B: 6@ = $PTIME
    4@ /= 100
    6@ /= 100
    6@ *= 100
    0062: 5@ -= 6@
    6@ /= 10000
    6@ *= 100
    0062: 4@ -= 6@
    6@ /= 100
    008B: 7@ = $PTIME1 // integer values and handles
    008B: 8@ = $PTIME1 // integer values and handles
    7@ /= 100
    7@ *= 100
    0062: 8@ -= 7@
    7@ /= 100
    gosub @TimeCircuitsModelDisplay
end

// Display colons
if
    16@ > 999 // integer values
then
    16@ = 0 // integer values
end
if
    16@ < 500 // integer values
then
	3F10: set_car 0@ component "dtcolon" visible 1
	3F10: set_car 0@ component "ptcolon" visible 1
	3F10: set_car 0@ component "ltdcolon" visible 1
end

// Keypad stuff
for 2@ = 0 to 9 step 1
    0B11: 3@ = 2@ OR 0x30
    0B11: 4@ = 2@ OR 0x60
    if or
        0AB0: key_pressed 3@
        0AB0: key_pressed 4@
    then
        create_thread @TimeCircuitsModelKeypad 0@ 2@
    end
end

// Enter Key
if or
    0AB0: key_pressed 0x6D
    0AB0: key_pressed 0xBD
then
    create_thread @TimeCircuitsModelKeypadConfirm 0@
end
jump @TimeCircuitsModelStart

:TimeCircuitsModelDisplay
05F5: call_scm_func @TimeCircuitsModelMonth params_count 5 0@ 0 2@ 0 4@
05F5: call_scm_func @TimeCircuitsModelDay params_count 5 0@ 0 2@ 0 5@
05F5: call_scm_func @TimeCircuitsModelYear params_count 5 0@ 0 2@ 0 6@
05F5: call_scm_func @TimeCircuitsModelHour params_count 5 0@ 0 2@ 0 7@
05F5: call_scm_func @TimeCircuitsModelMinute params_count 5 0@ 0 2@ 0 8@
return

:TimeCircuitsModelMonth
if
    2@ == 0
then
    3F11: set_car 0@ component "dtmonth" index 4@ visible 1
else if
    2@ == 1
then
    3F11: set_car 0@ component "ptmonth" index 4@ visible 1
else
    3F11: set_car 0@ component "ltdmonth" index 4@ visible 1
end
end
05F6: cleo_return 0

:TimeCircuitsModelDay
gosub @DivideTwo
if
    2@ == 0
then
    3F11: set_car 0@ component "dtday2" index 4@ visible 1
    3F11: set_car 0@ component "dtday1" index 5@ visible 1
else if
    2@ == 1
then
    3F11: set_car 0@ component "ptday2" index 4@ visible 1
    3F11: set_car 0@ component "ptday1" index 5@ visible 1
else
    3F11: set_car 0@ component "ltdday2" index 4@ visible 1
    3F11: set_car 0@ component "ltdday1" index 5@ visible 1
end
end
05F6: cleo_return 0

:TimeCircuitsModelYear
gosub @DivideFour
if
    2@ == 0
then
    3F11: set_car 0@ component "dtyear4" index 4@ visible 1
    3F11: set_car 0@ component "dtyear3" index 5@ visible 1
    3F11: set_car 0@ component "dtyear2" index 6@ visible 1
    3F11: set_car 0@ component "dtyear1" index 7@ visible 1
else if
    2@ == 1
then
    3F11: set_car 0@ component "ptyear4" index 4@ visible 1
    3F11: set_car 0@ component "ptyear3" index 5@ visible 1
    3F11: set_car 0@ component "ptyear2" index 6@ visible 1
    3F11: set_car 0@ component "ptyear1" index 7@ visible 1
else
    3F11: set_car 0@ component "ltdyear4" index 4@ visible 1
    3F11: set_car 0@ component "ltdyear3" index 5@ visible 1
    3F11: set_car 0@ component "ltdyear2" index 6@ visible 1
    3F11: set_car 0@ component "ltdyear1" index 7@ visible 1
end
end
05F6: cleo_return 0

:TimeCircuitsModelHour
if
    4@ < 12
then
    if
        2@ == 0
    then
        3F10: set_car 0@ component "dtam" visible 1
    else if
        2@ == 1
    then
        3F10: set_car 0@ component "ptam" visible 1
    else
        3F10: set_car 0@ component "ltdam" visible 1
    end
    end
else
    if
        2@ == 0
    then
        3F10: set_car 0@ component "dtpm" visible 1
    else if
        2@ == 1
    then
        3F10: set_car 0@ component "ptpm" visible 1
    else
        3F10: set_car 0@ component "ltdpm" visible 1
    end
    end
end
gosub @TimeCircuitsHourAdjust
gosub @DivideTwo
if
    2@ == 0
then
    3F11: set_car 0@ component "dthour2" index 4@ visible 1
    3F11: set_car 0@ component "dthour1" index 5@ visible 1
else if
    2@ == 1
then
    3F11: set_car 0@ component "pthour2" index 4@ visible 1
    3F11: set_car 0@ component "pthour1" index 5@ visible 1
else
    3F11: set_car 0@ component "ltdhour2" index 4@ visible 1
    3F11: set_car 0@ component "ltdhour1" index 5@ visible 1
end
end
05F6: cleo_return 0

:TimeCircuitsModelMinute
gosub @DivideTwo
if
    2@ == 0
then
    3F11: set_car 0@ component "dtmin2" index 4@ visible 1
    3F11: set_car 0@ component "dtmin1" index 5@ visible 1
else if
    2@ == 1
then
    3F11: set_car 0@ component "ptmin2" index 4@ visible 1
    3F11: set_car 0@ component "ptmin1" index 5@ visible 1
else
    3F11: set_car 0@ component "ltdmin2" index 4@ visible 1
    3F11: set_car 0@ component "ltdmin1" index 5@ visible 1
end
end
05F6: cleo_return 0

//tcd switch and needles in the dash in front of the passenger seat
//the tcd switch needs to rotate in the opposite direction
:TimeCircuitsSwitchModel
8@ *= -1.0
3F16: rotate_car_part "tcdhandle" angle 0.0 8@ 0.0 car 0@
8@ *= -1.0
3F16: rotate_car_part "ppowerneedle" angle 0.0 8@ 0.0 car 0@
3F16: rotate_car_part "primaryneedle" angle 0.0 8@ 0.0 car 0@
return

:TimeCircuitsModelReset
//lights behind the tcd switch
3F10: set_car 0@ component "tcdswitchlighton" visible 0
3F10: set_car 0@ component "tcdswitchlightoff" visible 1
3F10: set_car 0@ component "gloveboxgaugeslights" visible 0
3F10: set_car 0@ component "tcdkeypadlightson" visible 0
//months
for 4@ = 1 to 12
	3F11: set_car 0@ component "dtmonth" index 4@ visible 0
	3F11: set_car 0@ component "ptmonth" index 4@ visible 0
	3F11: set_car 0@ component "ltdmonth" index 4@ visible 0
end

//days
for 4@ = 10 to 23
	3F11: set_car 0@ component "dtday" index 4@ visible 0
	3F11: set_car 0@ component "ptday" index 4@ visible 0
	3F11: set_car 0@ component "ltdday" index 4@ visible 0
end
//years
for 4@ = 10 to 49
	3F11: set_car 0@ component "dtyear" index 4@ visible 0
	3F11: set_car 0@ component "ptyear" index 4@ visible 0
	3F11: set_car 0@ component "ltdyear" index 4@ visible 0
end
//hours
for 4@ = 10 to 21
	3F11: set_car 0@ component "dthour" index 4@ visible 0
	3F11: set_car 0@ component "pthour" index 4@ visible 0
	3F11: set_car 0@ component "ltdhour" index 4@ visible 0
end
//minutes
for 4@ = 10 to 25
	3F11: set_car 0@ component "dtmin" index 4@ visible 0
	3F11: set_car 0@ component "ptmin" index 4@ visible 0
	3F11: set_car 0@ component "ltdmin" index 4@ visible 0
end
//am indicators
3F10: set_car 0@ component "dtam" visible 0
3F10: set_car 0@ component "ptam" visible 0
3F10: set_car 0@ component "ltdam" visible 0

//pm indicators
3F10: set_car 0@ component "dtpm" visible 0
3F10: set_car 0@ component "ptpm" visible 0
3F10: set_car 0@ component "ltdpm" visible 0

//colons between hours and minutes
3F10: set_car 0@ component "dtcolon" visible 0
3F10: set_car 0@ component "ptcolon" visible 0
3F10: set_car 0@ component "ltdcolon" visible 0
return

:TimeCircuitsModelKeypad
3F15: move_car_part "tcdkeypadbutton" index 1@ pos 0.0 0.005 0.0 car 0@
wait 50
3F15: move_car_part "tcdkeypadbutton" index 1@ pos 0.0 0.0 0.0 car 0@
end_thread

:TimeCircuitsModelKeypadConfirm
3F10: set_car 0@ component "tcdkeypadenterlighton" visible 1
3F14: move_car_part "tcdkeypadbuttonenter" pos 0.0 0.002 0.0 car 0@
wait 50
3F14: move_car_part "tcdkeypadbuttonenter" pos 0.0 0.0 0.0 car 0@
wait 450
3F10: set_car 0@ component "tcdkeypadenterlighton" visible 0
end_thread
