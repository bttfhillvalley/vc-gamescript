//THE INTERFACE

:AtSetFrame //takes 128 Bytes of allocation table at 0x78C896 to 0x78C916 (PAPPAS AND ANTENNAS)
if 0@ < 32 //use first 32 slots (objects) to fit in
then
    0006: 15@ = 0@
    0012: 15@ *= 2
//BYTE
    0006: 10@ = 0x78C896
    000A: 10@ += 15@
//BYTE
    0006: 12@ = 0x78C897
    000A: 12@ += 15@
//SHORT
    0006: 11@ = 0x78C8D6
    000A: 11@ += 15@

//SEND
    000A: 0@ += 1
    05DF: write_memory 10@ size 1 value 0@ virtual_protect 0 //call object (BYTE)
    000A: 2@ += 0
    05DF: write_memory 12@ size 1 value 10 virtual_protect 0 //pause flag (BYTE)
    000A: 1@ += 0
    05DF: write_memory 11@ size 2 value 1@ virtual_protect 0 //set frame (SHORT)
end
05F6: ret 0

:AtSetPause //takes 128 Bytes of allocation table at 0x78C896 to 0x78C916 (PAPPAS AND ANTENNAS)
if 0@ < 32 //use first 32 slots (objects) to fit in
then
    0006: 15@ = 0@
    0012: 15@ *= 2
//BYTE
    0006: 10@ = 0x78C896
    000A: 10@ += 15@
//BYTE
    0006: 12@ = 0x78C897
    000A: 12@ += 15@
//SHORT
    //0006: 11@ = 0x78C8D6
    //000A: 11@ += 15@

//SEND
    000A: 0@ += 1
    05DF: write_memory 10@ size 1 value 0@ virtual_protect 0 //call object (BYTE)
    000A: 2@ += 0
    05DF: write_memory 12@ size 1 value 1@ virtual_protect 0 //pause flag (BYTE)
    //000A: 1@ += 0
    //05DF: write_memory 11@ size 2 value 1@ virtual_protect 0 //set frame (SHORT)
end
05F6: ret 0
