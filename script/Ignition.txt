:Ignition
if
    Car.wrecked(0@)
then
    return
end

// TODO:  This startup sequence needs to be redone
// The oil pressure needle moves, but not the oil temp
// Volts needle is oscillating too much

3F02: 1@ = car 0@ engine_state
// Show battery light
if and
    8119:   not car 0@ wrecked
    00DC:   player $PLAYER_CHAR driving 0@
    1@ == 0
then
    05F5: call_scm_func @DrawTexture params_count 9 3 782.0 155.0 45.0 23.0 255 255 255 255
end
// Handle Ignition
if
    80E1:   not key_pressed 0 16  // Accelerate Key
then
    12@ = 0
end

if and
    1@ == 0
    8119:   not car 0@ wrecked
    00DC:   player $PLAYER_CHAR driving 0@
    00E1:   key_pressed 0 16  // Accelerate Key
    12@ == 0
then
    0209: 2@ = random_int 1 100
    if or
        $ENGINE_TURNOVER == 0
        2@ == 50 // integer values
    then
        3F03: car 0@ turn_on_engine
        $ENGINE_TURNOVER = 0
        1@ = 1
    else
        05F5: call_scm_func @DrawTexture params_count 9 3 782.0 155.0 45.0 23.0 64 64 64 255 // battery light off
        if
            $START == 0 // integer values
        then
            $START = 1 // integer values
            3F86: attach_sound "engine_turnover.wav" to_car 0@ offset 0 0 0 loop 1 min 10.0
        end
    end
else
    if
        $START == 1
    then
        $START = 0 // integer values
        3F81: stop_sound "engine_turnover.wav"
    end
end

// Handle shutting down when leaving car
if and
    1@ == 1
    8119:   not car 0@ wrecked
    00DC:   player $PLAYER_CHAR driving 0@
then
    if
        00E1:   key_pressed 0 15  // Exit car key
    then
        02D4: car 0@ turn_off_engine
        1@ = 0
    end
end

// Sounds and setting engine state
if
    13@ == 0
then
    if
        1@ == 1
    then
        13@ = 1 // Engine on
        $IGNITION = 0
        3F86: attach_sound "engine_start.wav" to_car 0@ offset 0 0 0 loop 0 min 10.0
        create_thread @DashboardStartup 0@
    end
else
    if and
        8119:   not car 0@ wrecked
        00DC:   player $PLAYER_CHAR driving 0@
        00E1:   key_pressed 0 16  // Accelerate Key
    then
        12@ = 1
    end

    if
        1@ == 0
    then
        13@ = 0
        if
            $REMOTE_TRAVEL == 0
        then
            $VSOUND = 0
            3F86: attach_sound "engine_stop.wav" to_car 0@ offset 0 0 0 loop 0 min 10.0
            // Stop Animations.  Probably don't have to other then get the voltage down to 0
            create_thread @DashboardShutdown 0@
        end
    end
end
return

:DashboardShutdown
3F16: rotate_car_part "ignitionkey" angle 225.0 0.0 0.0 car 0@
3F16: rotate_car_part "ignition" angle 225 0.0 0.0 car 0@
//down
for 1@ = 30.0 to -80.0 step -5.0
    wait 10
    3F16: rotate_car_part "voltsneedle" angle 0.0 1@ 0.0 car 0@
end
3F10: set_car 0@ component "seatbeltlight" visible 0
3F10: set_car 0@ component "lambdalight" visible 0
3F10: set_car 0@ component "oillight" visible 0
3F10: set_car 0@ component "fuellight" visible 0
3F10: set_car 0@ component "brakelight" visible 0
3F10: set_car 0@ component "batterylight" visible 0
end_thread

// Animate ignition sequence
:DashboardStartup
// TODO: Need to redo to not crash RC
//turn key
wait 0
// Initialize dashboard
3F16: rotate_car_part "ignitionkey" angle 135.0 0.0 0.0 car 0@
3F16: rotate_car_part "ignition" angle 135.0 0.0 0.0 car 0@
3F16: rotate_car_part "oilneedle" angle 0.0 -30.0 0.0 car 0@  //warm main temp
3F10: set_car 0@ component "lambdalight" visible 0 //keep off
3F10: set_car 0@ component "fuellight" visible 0   //keep off
3F10: set_car 0@ component "oillight" visible 1     //activate
3F10: set_car 0@ component "brakelight" visible 1    //activate
3F10: set_car 0@ component "batterylight" visible 1  //activate

// Wiggle volts needle
for 2@ = 0 to 3 step 1
    for 1@ = 80.0 downto 0.0 step 20.0
        wait 10
        3F16: rotate_car_part "voltsneedle" angle 0.0 1@ 0.0 car 0@
    end
    // Down
    for 1@ = 0.0 to 80.0 step 20.0
        wait 10
        3F16: rotate_car_part "voltsneedle" angle 0.0 1@ 0.0 car 0@
    end
end

// Center Volts
3F16: rotate_car_part "voltsneedle" angle 0.0 40.0 0.0 car 0@

// Warm up oil
wait 1000
gosub @CheckCarWrecked
for 1@ = -30.0 to 0.0 step 5.0
    wait 10
    3F16: rotate_car_part "oilneedle" angle 0.0 1@ 0.0 car 0@
end

// Oil Temp Diagnostic (?)
wait 500
gosub @CheckCarWrecked
for 1@ = 0.0 downto -75.0 step 5.0
    wait 10
    3F16: rotate_car_part "oilneedle" angle 0.0 1@ 0.0 car 0@
end

// Turn off Dashboard lights
wait 1000
gosub @CheckCarWrecked
3F10: set_car 0@ component "batterylight" visible 0  //off
wait 1000
gosub @CheckCarWrecked
3F10: set_car 0@ component "oillight" visible 0    //off
wait 1000
gosub @CheckCarWrecked
3F10: set_car 0@ component "seatbeltlight" visible 1
wait 1000
gosub @CheckCarWrecked
3F10: set_car 0@ component "seatbeltlight" visible 0
wait 5000
gosub @CheckCarWrecked

// Stabilize oil
for 1@ = -75.0 to 30 step 5.0
    wait 10
    3F16: rotate_car_part "oilneedle" angle 0.0 1@ 0.0 car 0@
end
end_thread
