
//{$INCLUDE TimeEffects.txt}
// ========================================
// 0@ is the car itself
// 1@ is typically used for the speed
// 2@, 3@, 4@ are for the car coordinates
// 5@ - 9@ are generally three
// 7@ is for bit operations
// 8@ for recording health
// 9@ is for spark sound tracking when not time travelling, car angle otherwise
// 10@ is for the model
// 11@ controls various time machine functions, as well as model variations
// 12@ - 15@ are reserved for time circuits
// 16@ - 17@ are the timers, so no touchy
// ========================================
// 11@ Bit flags
// MSB
// Byte 1
// 12345678
// - 1: Memory status 0, 1
// - 2: Fuel status 0 - Unfueled, 1 - Fueled  1 bit
// - 3: Flying mode 0 - Driving, 1 - Flying 1 bit
// - 4: Hover circuits status 0 - OK, 1 - Fried
// - 5: Hover circuits installed 0 - Not installed, 1 Installed
// - 6: Time Circuits status 0 - OK, 1 Fried
// - 7: Time Circuits switch 0 - Off, 1 On
// - 8: Rear deck variant 0 - Plutonium, 1 - Mr Fusion
// LSB
// Byte 2 - model stuff
// 12334455
// 1 - Hoodbox 0 - Not installed, 1 - Installed
// 2 - Tow hitch 0 - Not installed, 1 - Installed
// 3 - Wheels 0 - Delorean, 1 - 50s Whitewalls, 2 - Rail wheels
// 4 - Plate 0 - No plate, 1 - OUTATIME plate, 2 - Future plate
// 5 - Hook 0 - No nook, 1 - Hook holder, 2 - Hook on the side, 3 - Hook up
// 12@ and 13@ are the destination time
// 13@ is compounded with the status of the time circuits.
// 14@ and 15@ are the past time
:Time
$MEMORY_BIT   = 0x800000 // 1 bit
$FUEL_BIT     = 0x400000 // 1 bit
$FLYING_BIT   = 0x200000 // 1 bit
$FC_FRIED_BIT = 0x100000 // 1 bit
$FC_BIT       = 0x080000 // 1 bit
$TC_FRIED_BIT = 0x040000 // 1 bit
$TC_BIT       = 0x020000 // 1 bit
$REAR_BIT     = 0x010000 // 1 bit

0B12: $FUEL_BITMASK = $FUEL_BIT XOR 0xFFFFFFFF
0B12: $TC_BITMASK = $TC_BIT XOR 0xFFFFFFFF
0B12: $TC_FRIED_BITMASK = $TC_FRIED_BIT XOR 0xFFFFFFFF

// Lots of unused bits for now just in case
$FLASH_BIT    = 0x0800 // 1 bit
$SPEEDO_BIT   = 0x0400 // 1 bit
$BOILER_BIT   = 0x0200 // 1 bit
$CLOCK_BIT    = 0x0100 // 1 bit

// LSB bits
$HOOD_BIT   = 0x80 // 1 bit
$HITCH_BIT  = 0x40 // 1 bit
$WHEELS_BIT = 0x30 // 2 bits
$PLATE_BIT  = 0x0C // 2 bits
$HOOK_BIT   = 0x03 // 2 bits
0B12: $WHEELS_BITMASK = $WHEELS_BIT XOR 0xFFFFFFFF
$WHEELS_DELOREAN_BIT  = 0x00
$WHEELS_50S_BIT       = 0x10
$WHEELS_TRAIN_BIT     = 0x20

0B12: $PLATE_BITMASK = $PLATE_BIT XOR 0xFFFFFFFF
$PLATE_NONE_BIT      = 0x00
$PLATE_OUTATIME_BIT  = 0x04
$PLATE_FUTURE_BIT    = 0x08

0B12: $HOOK_BITMASK = $HOOK_BIT XOR 0xFFFFFFFF
$HOOK_NONE_BIT      = 0x00
$HOOK_HOLDER_BIT    = 0x01
$HOOK_SIDE_BIT      = 0x02
$HOOK_UP_BIT        = 0x03

thread 'TIME'
Car.SetImmunities(0@, 0, 0, 0, 1, 1)
053F: set_car 0@ tires_vulnerable 0
create_thread @SetVariation 0@ 1@
10@ = Car.Model(0@)
gosub @TimeCircuitsModelReset
gosub @TimeEffectsModelReset
gosub @LightsOff
gosub @GlowInit

:TimeStart
wait 10
if
   Player.Defined($PLAYER_CHAR)
else_jump @TimeStart
if
   not Car.Wrecked(0@)
else_jump @TimeEnd
0407: create_coordinate 2@ 3@ 4@ from_car 0@ offset 0.0 0.0 0.0
008C: 4@ = float_to_integer 4@
02E3: 11@ = car 0@ speed
3F10: set_car 0@ component "inner_vents" visible 0
gosub @MemoryHandling   // This controls global/local variables whenever the player switches between time machines, since time circuit control is global.
gosub @Hook  // Controls putting up/down the hook.  I forget the variations though.  It's in the garage thread so I can document it here as well.
gosub @TimeResetCamera
gosub @FluxCapacitorAnimation
if
    00DC:   player $PLAYER_CHAR driving 0@
else_jump @TimeFuel
gosub @TimeUnloadSparkSounds

// Time circuits flashing based on car variation
if
    $FLASH == 0xFF
then
    $FLASH = 0xF
    create_thread @TimeCircuitsFlash 1@
end

// Check Fuel
:TimeFuel
0B10: 7@ = 1@ AND $FUEL_BIT
if and
   not 10@ == #MAVERICK  // Not Train
   not 10@ == #BUS
   7@ == 0 // not fueled
else_jump @TimeFly
gosub @Fuel

// Check To see if we're going to hover.
// FIXME: This will be removed from this section in the future since there will be no need for model swaps that require setting everything back up since it'll be the same car instance
:TimeFly
0B10: 6@ = 1@ AND $FC_BIT  // Flying Circuits
0B10: 7@ = 1@ AND $FC_FRIED_BIT // Fried
0B10: 8@ = 1@ AND $FLYING_BIT   // Is car flying?
if and
    not 7@ == 0   // Flying circuits are fried
    not 8@ == 0  // Flying
then
    02D4: car 0@ turn_off_engine
end

// TODO: Need to only let car go to driving if flying circuits are damaged

if or
    00DC:   player $PLAYER_CHAR driving 0@
    3F29:   is_player_in_remote_mode_with_car 0@
else_jump @TimeFlyHover

if and
    003A:   $KEY == $KEY_HOVERCONVERSION // C
    not 6@ == 0  // Flying circuits are installed
    $CONVERSION == 0  // Not animating
else_jump @TimeFlyHover

:TimeFlyConvert
if or
    7@ == 0 // not Fried
    not 8@ == 0 // Flying
then
    0B12: 1@ = 1@ XOR $FLYING_BIT  // Flip flying bit
    $CONVERSION = 1
    create_thread @HoverAnimate 0@ 1@
end

:TimeFlyHover
gosub @HoverConversion

// Lightning check
0209: 2@ = random_int 0 1000
if and
    $LIGHTNING == 0
    $WEATHER == 2 // integer values
    2@ == 500     // integer values
    not 8@ == 0   // Flying
    00DC:   player $PLAYER_CHAR driving 0@
else_jump @TimeLightningCheck
$LIGHTNING = 1
create_thread @Lightning 0@ 1@

// =====================================================================================
:TimeLightningCheck
if
    $LIGHTNING == 2
else_jump @TimeCircuitsCheck
Car.Health(0@) = 300

// Fry both the flying and time circuits
0B11: 1@ = 1@ OR $FC_FRIED_BIT
0B11: 1@ = 1@ OR $TC_FRIED_BIT

02D4: car 0@ turn_off_engine
0407: create_coordinate $CCX $CCY $CCZ from_car 0@ offset 0.0 0.0 2.5
jump @Time88TrackCamera

:TimeCircuitsCheck
// Check Time Circuits On for Effects
gosub @TimeEffectsModelReset
0B10: 7@ = 1@ AND $TC_FRIED_BIT // Time Circuits Fried
0B10: 8@ = 1@ AND $TC_BIT       // Time Circuits status
if and
    7@ == 0     // Time Circuits are not fried
    not 8@ == 0 // Time Circuits are On
    $COOLDOWN == 0
else_jump @TimeStart

:TimeEffectsCheck
gosub @TimeUnloadSparkSounds

// Bunch of speed related stuff for SID, coils, plasma, etc.
if
  11@ > 40.5 // == 74.3 mph
else_jump @TimeStart
// Set alpha of coils to match speed of car
0087: 2@ = 11@
2@ -= 40.5
2@ *= 64.0
008C: 3@ = float_to_integer 2@
// Cap Alpha at 255
if
  3@ > 255
then
  3@ = 255
end
3F12: set car 0@ comp "fluxcoilson" alpha 3@
if
  11@ > 43.5 // == 79.8 mph // floating-point values
else_jump @TimeStart
// Coils start glowing around 80 mph
gosub @TimeCoil
if
  11@ > 44.5 // == 81.7 mph // floating-point values
else_jump @TimeStart
3F10: set_car 0@ component "fluxcapacitorlightson" visible 1
for 7@ = 1 to 6 step 1
    3F11: set_car 0@ component "flux" index 7@ visible 1
end

// If we are fueled, go ahead and show sparks and
// Load and play spark sounds
0B10: 7@ = 1@ AND $HOOD_BIT // Time Circuits Fried
if or
    03D2:   wav 1 ended
    83D0:   not wav 1 loaded
then
    040D: unload_wav 1
    if
       7@ == 0
    then
        03CF: load_wav 'BAND_07' as 1
    else
        03CF: load_wav 'BIKEREV' as 1
    end
end
9@ = 1
03D1: play_wav 1

// Plasma and wormhole starts around 82 mph
gosub @TimePlasma

// Wormhole and sparks only pop up if fueled or if its the train
0B10: 7@ = 1@ AND $FUEL_BIT // Time Circuits Fried
if or
   not 7@ == 0 // Fueled
   Car.Model(0@) == #BUS
   Car.Model(0@) == #MAVERICK
then
   gosub @TimeSparks
   gosub @TimeWormhole
end
if
  11@ > 47.6 // == 87.3 mph // floating-point values
else_jump @TimeStart
//gosub @Wire

// Prepare for temporal displacement
0B10: 7@ = 1@ AND $FUEL_BIT // Time Circuits Fried
if or
  not 7@ == 0 // Fueled
  Car.Model(0@) == #BUS
  Car.Model(0@) == #MAVERICK
else_jump @TimeStart

// Setup camera if we're in cutscene mode so we track the car before it time travels
if and
    $MODE == 0 // integer values
    00DC:   player $PLAYER_CHAR driving 0@
then
    0208: $RANDOMX = random_float -5.0 -3.0
    0208: $RANDOMY = random_float -15.0 -10.0
    if or
        Car.Model(0@) == #SPARROW
        Car.Model(0@) == #MAVERICK
    then
        0208: $RANDOMZ = random_float -10.0 10.0
    else
        0208: $RANDOMZ = random_float 2.5 7.5
    end
    $CAMERA_CONTROL = 0
    0407: create_coordinate $CAM_X $CAM_Y $CAM_Z from_car 0@ offset $RANDOMX $RANDOMY $RANDOMZ
    0460: set_camera_pointing_time 0.0 1000
    Camera.SetPosition($CAM_X, $CAM_Y, $CAM_Z, 0.0, 0.0, 0.0)
    Camera.OnVehicle(0@, 15, 1)
end

// 88 MPH!!!!!!!
if
  11@ > 48.1 // floating-point values
else_jump @TimeStart

//=============================================================================================
// Load various explosion sounds.

:Time88
040D: unload_wav 1
040D: unload_wav 2

// Check for cutscene mode
if or
    80DC:   not player $PLAYER_CHAR driving 0@
    $MODE == 0 // integer values
then
    if or
        Car.Model(0@) == #BUS
        Car.Model(0@) == #MAVERICK
    then
        // Train
        03CF: load_wav 'ASS_3' as 1
    else if
        $WIRE == 0 // integer values
    then
        // Delorean
        03CF: load_wav 'BAND_02' as 1
    else
        // Clocktower
        03CF: load_wav 'ASS_9' as 1
    end
    end
else
    // Instant
    03CF: load_wav 'ASS_1' as 1
end

// Play Sound
create_thread @PlaySound 1

//=============================================================================================
// Cutscene camera related stuff to figure out what to track
0407: create_coordinate $CCX $CCY $CCZ from_car 0@ offset 0.0 0.0 0.0

:Time88TrackCamera
if and
    00DC:   player $PLAYER_CHAR driving 0@
    $MODE == 0 // integer values
then
    // Set camera position
    Camera.SetPosition($CAM_X, $CAM_Y, $CAM_Z, 0.0, 0.0, 0.0)
    0460: set_camera_pointing_time 0.0 1000
    Camera.PointAt($CCX, $CCY, $CCZ, 1)
    $CUTSCENE = 1 // integer values
    $TRAVEL = 1 // integer values
    $INST_TRAVEL = 1 // integer values
end

// Make care invincible while its supposed to be outatime (that way it doesn't explode while we're in a cutscene)
Car.SetImmunities(0@, 1, 1, 1, 1, 1)
8@ = Car.Health(0@)
9@ = Car.Angle(0@)
10@ = Car.Model(0@)
Car.Health(0@) = 1000

// Change current time if we are the ones time travelling
if
    00DC:   player $PLAYER_CHAR driving 0@
then
    0581: toggle_radar 0
    gosub @GlobalDateToLocal
end

// Set Last Departed date
008B: 14@ = $CYEAR // integer values (never used VC or GTA 3)
14@ *= 100 // integer values (never used in VC or GTA 3)
005C: 14@ += $CMONTH // integer values and handles
14@ *= 100 // integer values (never used in VC or GTA 3)
005C: 14@ += $CDAY // integer values (never used VC or GTA 3)

// Get Last Departed Time
00BF: $CHOUR = current_time_hours, $CMINUTE = current_time_minutes
008B: 15@ = $CHOUR // integer values and handles
15@ *= 100 // integer values (never used in VC or GTA 3)
005C: 15@ += $CMINUTE // integer values (never used VC or GTA 3)*/

// Set date/time globals if we're driving
if
00DC:   player $PLAYER_CHAR driving 0@
then
    008A: $PTIME = 14@ // integer values and handles
    008A: $PTIME1 = 15@ // integer values and handles
end

// Unfuel the car
0B10: 1@ = 1@ AND $FUEL_BITMASK

// Now for the actual temporal displacement
// Record coordinates
0407: create_coordinate 2@ 3@ 4@ from_car 0@ offset 0.0 0.0 -0.75

// Plate stuff
0B10: 5@ = 1@ AND $FLYING_BIT  // Get car variation
0B10: 6@ = 1@ AND $PLATE_BIT  // Get car variation
0B10: 7@ = 1@ AND $HOOK_BIT  // Get car variation
if and
    5@ == 0 // Not flying
    003B: 6@ == $PLATE_OUTATIME_BIT  // OUTATIME plate
then
    // Remove plate from model
    0B10: 1@ = 1@ AND $PLATE_BITMASK
end

// Hook stuff
0B10: 7@ = 1@ AND $HOOK_BIT  // Get car variation
if
    003B: 7@ == $HOOK_SIDE_BIT // Hook on side
then
    // Remove hook
    0B10: 1@ = 1@ AND $HOOK_BITMASK
    0B11: 1@ = 1@ OR $HOOK_HOLDER_BIT
else if
    003B: 7@ == $HOOK_UP_BIT // Hook up
then
    // Remove hook
    0B10: 1@ = 1@ AND $HOOK_BITMASK
    0B11: 1@ = 1@ OR $HOOK_HOLDER_BIT
end
end

// Update variations
create_thread @SetVariation 0@ 1@

if and
    $MODE == 1
    00DC:   player $PLAYER_CHAR driving 0@
then
    // Instant Time Travel effects
    0169: set_fade_color 255 255 255
    043C: set_game_sounds_disable_on_fade 0
    fade 0 0
    wait 0
    $TRAVEL = 1 // integer values
    $INST_TRAVEL = 1 // integer values
    $FADE = 1 // integer values
    3F12: set car 0@ component "fluxcoilson" alpha 0
    3F12: set car 0@ component "wormhole" alpha 0
    3F10: set_car 0@ component "fluxcapacitorlightson" visible 0
    3F10: set_car 0@ component "lightfl" visible 0
    3F10: set_car 0@ component "lightfr" visible 0
else
    // Plate animation
    if and
        5@ == 0 // Not flying
        003B: 6@ == $PLATE_OUTATIME_BIT  // OUTATIME plate
    then
        create_thread @Plate 0@ 2@ 3@ 4@
    end

    // Hook animation
    if
        003B: 7@ == $HOOK_SIDE_BIT // Hook on side
    then
        create_thread @HookSideDetach 0@ 2@ 3@ 4@ 9@
    else if
        003B: 7@ == $HOOK_UP_BIT // Hook up
    then
        create_thread @HookDetach 0@ 2@ 3@ 4@ 9@
    end
    end

    // Create explosion
    gosub @EntryExplosion

    // Create Firetrail
    if
        $LIGHTNING == 2
    then
        create_thread @FireTrail99 0@
    else
        create_thread @FireTrail 0@ 1@
    end

    // Handle the Train stuff if it has to dissapear.  This will be gone later.
    if or
        Car.Model(0@) == #BUS
        Car.Model(0@) == #MAVERICK
    then
        end_thread_named 'H_WHEEL'
        end_thread_named 'WHEEL'
        end_thread_named 'ROTATE'
        gosub @TrainAnimDestroy
        gosub @TrainWheelDestroy
    end

    // Wait a bit during cutscene
    // Need to get rid of this for RC control I think.
    wait 5000

    // Wait longer if its the clocktower scene
    if and
        $WIRE == 1 // integer values
        00DC:   player $PLAYER_CHAR driving 0@
    then
        wait 10000
    end
end
if
    80DC:   not player $PLAYER_CHAR driving 0@
else_jump @TimeReentryFadeOut

// =================================================================================
// This part deals with when the player is not driving the Delorean and is awaiting its return.

:TimePast
wait 10
// Wait until we hit the target time
if and
003C:   $CTIME == 12@ // integer values (never used VC or GTA 3)
003C:   $CTIME1 == 13@ // integer values (never used VC or GTA 3)
else_jump @TimePastA
jump @TimePastReentry

:TimePastA
// Only preload the time machine in if we are changing time periods.
if
    $SET_TIME == 1 // integer values
else_jump @TimePast
// Check same date, but time is in the future
if and
003C:   $CTIME == 12@ // integer values (never used VC or GTA 3)
001E:   $CTIME1 > 13@ // integer values
else_jump @TimePastB
jump @TimePastLoadModel

:TimePastB
if
001E:   $CTIME > 12@ // integer values
else_jump @TimePast

:TimePastLoadModel
Model.Load(10@)

:TimePastModelVariation
wait 0
if
   Model.Available(10@)
else_jump @TimePastModelVariation

:TimePastModelCreateCar
0@ = Car.Create(10@, 2@, 3@, 4@)
Model.Destroy(10@)
// Rotate the time machine to make it look like it braked after entry
9@ += 120.0
Car.Angle(0@) = 9@
9@ -= 120.0
Car.Health(0@) = 8@
create_thread @SetVariation 0@ 1@
gosub @TimeEffectsModelReset
gosub @LightsOff

:TimePastWait
wait 0
if
  $INST_TRAVEL == 0 // integer values
else_jump @TimePastWait
jump @TimeStart

:TimePastReentry
//00BC: text_highpriority 'DEL0' 1000 ms 1  // dmc12 deLoRean
if
  $INST_TRAVEL == 0 // integer values
else_jump @TimePastReentryCheckMode
040D: unload_wav 1
if or
  10@ == #BUS // integer values
  10@ == #MAVERICK // integer values
then
03CF: load_wav 'ASS_4' as 1
else
03CF: load_wav 'BAND_01' as 1
end
create_thread @PlaySound 1
while 83D0:   not wav 1 loaded
    wait 0
end
jump @TimePastReentryPlaySound

:TimePastReentryCheckMode
if
  $MODE == 0 // integer values
else_jump @TimePastReentryPlaySound

// Need to wait until we stop fading before we start playing the explosion to sync up
:TimePastReentryCheckFade
wait 10
if
  $FADE == 0 // integer values
else_jump @TimePastReentryCheckFade

:TimePastReentryPlaySound
03D1: play_wav 1

// Load models
:TimeReentryLoadModel
Model.Load(10@)
while not Model.Available(10@)
    wait 10
end
0@ = Car.Create(10@, 2@, 3@, 5000.0)
create_thread @SetVariation 0@ 1@
gosub @TimeEffectsModelReset
gosub @LightsOff
Model.Destroy(10@)
jump @TimeReentryExplosion

// =========================================================================

:TimeReentryTrainAnimations
// Set up train animations again. To be removed
if or
   Car.Model(0@) == #BUS
   Car.Model(0@) == #MAVERICK
then
    create_thread @TrainAnim 0@
    if
       Car.Model(0@) == #BUS
    then
        create_thread @TrainWheel 0@
    else
        create_thread @TrainHoverWheel 0@
    end
end
return

// =========================================================================
// We're going to fade out here, then set the current time.

:TimeReentryFadeOut
// Fade out only for cutscene
if
    $MODE == 0 // integer values
then
    wait 1000
    0169: set_fade_color 0 0 0
    fade 0 750
    wait 750
    // We are now faded to black
    $FADE = 1 // integer values

    // Reset camera to look at reentry point (for example if it was already looking at the Lybians from before
    // Might gosub this
    Camera.SetPosition($CAM_X, $CAM_Y, $CAM_Z, 0.0, 0.0, 0.0)
    0460: set_camera_pointing_time 0.0 1000
    Camera.PointAt($CCX, $CCY, $CCZ, 1)
    Object.Destroy($HOOK)
end

// Set time
00C0: set_current_time $HOUR $MINUTE
0084: $CYEAR = $YEAR // integer values and handles
0084: $CMONTH = $MONTH // integer values and handles
0084: $CDAY = $DAY // integer values and handles
$SET_TIME = 1 // integer values

// Reset the realtime and weather threads
end_thread_named 'TIMEMOD'
end_thread_named 'WEATHER'
create_thread @TimeMod
create_thread @Weather

// Clear stuff
Player.ClearWantedLevel($PLAYER_CHAR)
03BA: clear_cars_from_cube -5000.0 -5000.0 -5000.0 5000.0 5000.0 5000.0
042B: clear_peds_from_cube -5000.0 -5000.0 -5000.0 5000.0 5000.0 5000.0
0395: clear_area 1 at 2@ 3@ range 4@ 5000.0
04E4: unknown_refresh_game_renderer_at 2@ 3@
if
  $MODE == 0 // integer values
then
    wait 2000
    fade 1 500
    040D: unload_wav 1
    if or
        Car.Model(0@) == #BUS
        Car.Model(0@) == #MAVERICK
    then
        03CF: load_wav 'ASS_4' as 1
    else
        03CF: load_wav 'BAND_01' as 1
    end
    wait 1000
    $FADE = 0 // integer values

    // Play Re entry sounds
    03D1: play_wav 1
else
    015D: set_gamespeed 1.0
    fade 1 100
    $FADE = 0 // integer values
end

// 3 sonic booms, or one if its instant
:TimeReentryExplosion
gosub @ReentryExplosion
if or
  $INST_TRAVEL == 0 // integer values
  $MODE == 0 // integer values
then
    // Two more explosions if we're in cutscene
    wait 750
    gosub @ReentryExplosion
    wait 700
    gosub @ReentryExplosion
end

// Have the time vehicle come back
if
00DC:   player $PLAYER_CHAR driving 0@
else_jump @TimeReentrySetVehicleData
$TRAVEL = 0 // integer values
0581: toggle_radar 1
if
  $MODE == 0 // integer values
else_jump @TimeReentryEnd

:TimeReentrySetVehicleData
Car.PutAt(0@, 2@, 3@, 4@)
//gosub @TimeReentryTrainAnimations
$CUTSCENE = 0 // integer values
$SET_TIME = 0 // integer values
$INST_TRAVEL = 0 // integer values
$COOLDOWN = 1
053F: set_car 0@ tires_vulnerable 0
Car.Health(0@) = 8@
Car.Angle(0@) = 9@
Car.SetImmunities(0@, 0, 0, 0, 1, 1)
//wait 10
04BA: set_car 0@ speed_instantly 11@
if and
    00DC:   player $PLAYER_CHAR driving 0@
    $MODE == 0 // integer values
then
    Camera.OnVehicle(0@, 15, 1)
end
if
    80DC:   not player $PLAYER_CHAR driving 0@
then
    // This is for RC mode to get it to handbrake turn
    if
        Car.Wrecked($DELOREAN)
    then
        008A: $DELOREAN = 0@
    end
    create_thread @TimeEngineOff 0@
end

:TimeReentryEnd
9@ = 0 // Unload sounds
043C: set_game_sounds_disable_on_fade 1
gosub @TimeEffectsModelReset
if
    $LIGHTNING == 2
then
    02D4: car 0@ turn_off_engine
    3F22: set_car 0@ wheelie
else
    create_thread @TimeReentryCoil 0@ 1@
end
$LIGHTNING = 0
create_thread @Cold 0@ 1@
create_thread @Steam 0@ 1@
create_thread @FuelEmpty 0@ 1@
jump @TimeStart

// ===================================================================================
:TimeReentryCoil
0B10: 7@ = 1@ AND $TC_FRIED
if
    7@ == 0  // Time circuits aren't fried
then
    while 17@ < 999
        gosub @TimeCoil
        gosub @TimeBodyGlow
        wait 10
    end
end
3F18: set_car 0@ component "fluxcoilson" glow 0
3F10: set_car 0@ component "fluxcoilson" visible 0
3F12: set car 0@ component "fluxcoilson" alpha 0

end_thread


// ===================================================================================

:TimeEngineOff
0477: set_car 0@ animation 3 250 ms
02D4: car 0@ turn_off_engine
end_thread

// ==================================================================================
// Reset stuff related to the camera and sound effects since they can loop (vfx effects do not)

:TimeResetCamera
0B10: 7@ = 1@ AND $TC_FRIED_BIT
0B10: 8@ = 1@ AND $TC_BIT
if and
    00DC:   player $PLAYER_CHAR driving 0@
    $LIGHTNING == 0
    $CAMERA_CONTROL == 0
then
    if or
        11@ < 47.6
        not 7@ == 0 // Time Circuits are fried
        8@ == 0 // Time Circuits are Off
        $COOLDOWN == 1
    then
        Model.Destroy(#KEYCARD)
        $CAMERA_CONTROL = 1
        // I forget if this has to change for RC mode, but this can be figured out later
        Camera.Restore
        Camera.SetBehindPlayer
    end
end
return

:TimeUnloadSparkSounds
0B10: 7@ = 1@ AND $TC_FRIED_BIT
0B10: 8@ = 1@ AND $TC_BIT
if
    9@ == 1
then
    if or
        11@ < 44.5
        not 7@ == 0 // Time Circuits are fried
        8@ == 0 // Time Circuits are Off
    then
        040D: unload_wav 1
        9@ = 0
    end
end
return

//================================================================================================

:TimeEnd
Car.RemoveReferences(0@)
end_thread

//======================================================================================================
// Play steam effects after reentry for BTTF1 Delorean
:Steam
thread 'STEAM'
0B10: 15@ = 1@ AND $REAR_BIT  // Get car variation
if
    not 15@ == 0 // Mr. Fusion version
then
    end_thread
end
wait 10000
if
    Car.Wrecked(0@)
then
    end_thread
end
if
01FC:   player $PLAYER_CHAR near_car 0@ radius 50.0 50.0 0
else_jump @SteamStart
$STEAM = 1 // integer values
040D: unload_wav 2
03CF: load_wav 'LIFTBEL' as 2
create_thread @PlaySound 2

:SteamStart
16@ = 0
while 16@ < 5000
    wait 10
    if
        Car.Wrecked(0@)
    then
        jump @SteamUnloadSound
    end

    // Keep the steam relative to the car speed.
    02E3: 2@ = car 0@ speed
    2@ /= 40.0 // floating-point values (never used in VC or GTA 3)
    2@ -= 0.2 // floating-point values
    02F8: get_vehicle 0@ Z_angle_sine_to 3@
    02F9: get_vehicle 0@ Z_angle_cosine_to 4@
    0011: 3@ *= 2@ // floating-point values  // Note: the incorrect math opcode was used here
    0011: 4@ *= 2@ // floating-point values  // Note: the incorrect math opcode was used here
    0407: create_coordinate 5@ 6@ 7@ from_car 0@ offset 0.4 -2.3 0.5
    0407: create_coordinate 8@ 9@ 10@ from_car 0@ offset -0.4 -2.3 0.5
    0437: scatter_particle 21 0.5 at 5@ 6@ 7@ 3@ 4@ 0.0 //right
    0437: scatter_particle 21 0.5 at 8@ 9@ 10@ 3@ 4@ 0.0 //left
end

:SteamUnloadSound
if
    $STEAM == 1
then
    040D: unload_wav 2
    $STEAM = 0 // integer values
end
end_thread

// ======================================================================================================

:Cold
thread 'COLD'
7@ = 0 // integer values
8@ = 0 // integer values
9@ = 0 // integer values
0B10: 15@ = 1@ AND $REAR_BIT  // Get car variation

:ColdStart
wait 10
if
   16@ < 81000 // integer values
else_jump @ColdWisps
if
  $TRAVEL == 0 // integer values
else_jump @ColdEnd
if
   not Car.Wrecked(0@)
else_jump @ColdEnd
if
001D:   17@ > 7@ // integer values (never used VC or GTA 3)
else_jump @ColdStart
17@ = 0 // integer values
9@ += 1 // integer values
if
  9@ == 2 // integer values
else_jump @ColdSteam
7@ += 1 // integer values
9@ = 0 // integer values

:ColdSteam
02E3: 11@ = car 0@ speed
if
  11@ < 10.0
jf @ColdStart
if and
   not Car.Model(0@) == #BUS
   not Car.Model(0@) == #MAVERICK
else_jump @ColdTrainSteam
gosub @ColdSteamParticle
gosub @ColdSteamParticle

// Plutonium version gets extra effects
if
   15@ == 0 // Plutonium version
else_jump @ColdSound
gosub @ColdSteamParticle
gosub @ColdSteamParticle
gosub @ColdSteamParticle
jump @ColdSound

:ColdTrainSteam
gosub @ColdTrainSteamParticle
gosub @ColdTrainSteamParticle
gosub @ColdTrainSteamParticle
gosub @ColdTrainSteamParticle
gosub @ColdTrainSteamParticle

// No cold sounds for the train
jump @ColdStart

:ColdSound
// Only play if near the car
if
01FC:   player $PLAYER_CHAR near_car 0@ radius 50.0 50.0 0
else_jump @ColdUnloadSound
10@ = 1 // Keeps track if the sound is playing or not.  Needs to be specific to each time machine as to not overlap sounds.

// Don't overwrite the vent sounds
if
  $STEAM == 0 // integer values
else_jump @ColdStart
if or
03D2:   wav 2 ended
83D0:   not wav 2 loaded
else_jump @ColdStart
040D: unload_wav 2
03CF: load_wav 'BURG_01' as 2
create_thread @PlaySound 2
jump @ColdStart

:ColdUnloadSound
// Stop the sound if we get too far away
if
  10@ == 1 // integer values
else_jump @ColdStart
10@ = 0 // integer values
040D: unload_wav 2
jump @ColdStart

:ColdSteamParticle
0208: 1@ = random_float -1.2 1.2
0208: 2@ = random_float -2.5 2.5
0208: 3@ = random_float 0.0 0.65
0407: create_coordinate 4@ 5@ 6@ from_car 0@ offset 1@ 2@ 3@
0437: scatter_particle 22 0.2 at 4@ 5@ 6@ 0 0 0
return

:ColdTrainSteamParticle
0208: 1@ = random_float -1.5 1.5
0208: 2@ = random_float -8.5 8.0
0208: 3@ = random_float -0.75 2.75
0407: create_coordinate 4@ 5@ 6@ from_car 0@ offset 1@ 2@ 3@
0437: scatter_particle 22 0.5 at 4@ 5@ 6@ 0 0 0
return

:ColdWisps
// This is when we have less cold effects and it stops
7@ = 0 // integer values
16@ = 0 // integer values

:ColdWispsStart
wait 0
if
   not Car.Wrecked(0@)
else_jump @ColdEnd
if
   not 7@ > 5 // integer values
else_jump @ColdEnd
02E3: 11@ = car 0@ speed
if
  11@ < 10.0
jf @ColdWispsIntermittent
gosub @ColdSteamParticle
gosub @ColdSteamParticle

:ColdWispsIntermittent
wait 10
if
   not Car.Wrecked(0@)
else_jump @ColdEnd
if
  16@ > 499 // integer values
else_jump @ColdWispsIntermittent
7@ += 1 // integer values
16@ = 0 // integer values
jump @ColdWispsStart

:ColdEnd
040D: unload_wav 2
end_thread

// =========================================================================================
:LocalDateToGlobal
008A: $YEAR = 12@ // integer values and handles
008A: $MONTH = 12@ // integer values and handles
008A: $DAY = 12@ // integer values and handles
$YEAR /= 100
$MONTH /= 100
$YEAR *= 100
0060: $DAY -= $YEAR
$YEAR /= 10000
$YEAR *= 100
0060: $MONTH -= $YEAR
$YEAR /= 100

008A: $HOUR = 13@ // integer values and handles
008A: $MINUTE = 13@ // integer values and handles
$HOUR /= 100
$HOUR *= 100
0060: $MINUTE -= $HOUR
$HOUR /= 100

0084: $HOURN = $HOUR // integer values and handles
if
    $HOUR >= 12 // integer values
then
    $AM = 1 // integer values
    $HOURN -= 12 // integer values
else
    $AM = 0 // integer values
end

// Time circuits stuff
0B10: $TCON = 1@ AND $TC_BIT
if
    not $TCON == 0
then
    $TCON = 1
end
0B10: $FRIED = 1@ AND $TC_FRIED_BIT
if
    not $FRIED == 0
then
    $FRIED = 1
end
gosub @GlobalDateToLocal
return

:GlobalDateToLocal
008B: 12@ = $YEAR // integer values and handles
12@ *= 100 // integer values (never used in VC or GTA 3)
005C: 12@ += $MONTH // integer values (never used VC or GTA 3)
12@ *= 100 // integer values (never used in VC or GTA 3)
005C: 12@ += $DAY // integer values (never used VC or GTA 3)
008B: 13@ = $HOUR
13@ *= 100 // integer values (never used in VC or GTA 3)
005C: 13@ += $MINUTE // integer values (never used VC or GTA 3)

// Time circuits stuff
0B10: 1@ = 1@ AND $TC_BITMASK
if
    $TCON == 1
then
    0B11: 1@ = 1@ OR $TC_BIT
end
0B10: 1@ = 1@ AND $TC_FRIED_BITMASK
if
    $FRIED == 1
then
    0B11: 1@ = 1@ OR $TC_FRIED_BIT
end
return

:LocalToGlobal
008A: $DELOREAN = 0@ // integer values and handles
008A: $PTIME = 14@ // integer values and handles
008A: $PTIME1 = 15@ // integer values and handles
return

:MemoryHandling
// This section is responsible for manipulating between local and global variables for each time machine
// When driving, the local variables are always being updated by global variables so the car knows its time circuits status.
// Any time the player reenters the car, any global variables are overwritten by local ones so the last state in known by the time machine is used.  Once again, to configure the
// Time circuits on the HUD.
0B10: 7@ = 1@ AND $MEMORY_BIT  // Get car variation
if
00DC:   player $PLAYER_CHAR driving 0@
then
    // Get global variables for the car and last departed time for the HUD time circuits
    gosub @LocalToGlobal
    if
        7@ == 0
    then
        0B12: 1@ = 1@ XOR $MEMORY_BIT
        gosub @LocalDateToGlobal
    else
        gosub @GlobalDateToLocal
    end
else
    if
        not 7@ == 0
    then
        0B12: 1@ = 1@ XOR $MEMORY_BIT
    end
end
return

:Plate
4@ = Car.Angle(0@)
Model.Load(#KEYCARD)
038B: load_requested_models
3@ += 0.75
02CE: 3@ = ground_z 1@ 2@ 3@
3@ += -0.35 // floating-point values
10@ = Object.Create(#KEYCARD, 1@, 2@, 3@)
Object.CollisionDetection(10@) = False
// Don't overwrite any clocktower sounds
if
    $WIRE == 0 // integer values
then
    03CF: load_wav 'ASS_13' as 2
    create_thread @PlaySound 2
end

// Spin plate
for 5@ = 0 to 28 step 1
    wait 10
    if
        4@ < -360.0 // floating-point values
    then
        4@ += 360.0 // floating-point values
    end
    0453: object 10@ set_rotation 0.0 -45.0 4@
    if
        5@ < 20
    then
        4@ -= 45.0
    else
        4@ -= 22.5  // Slow down spin near the end
    end
end

// Plate falls
for 6@ = 0.0 downto -90.0 step 10.0
    wait 10
    0453: object 10@ set_rotation 6@ -45.0 4@
    6@ += -10.0 // floating-point values
end

// Play sound
if
    $WIRE == 0 // integer values
then
    040D: unload_wav 1
    03CF: load_wav 'ASS_14' as 1
    create_thread @PlaySound 1
end

:PlateDestroy
wait 10
04C4: create_coordinate 11@ 12@ 13@ from_actor $PLAYER_ACTOR offset 0.0 1.2 0.0
0509: 14@ = distance between point 1@ 2@ and point 11@ 12@
if or
    $SET_TIME == 1
    14@ > 100.0 // floating-point values
jf @PlateDestroy
Object.Destroy(10@)
Model.Destroy(#KEYCARD)
end_thread

// ======================================================================================================
// Detaches the hook when we time travel and haven't hit a cable
:HookDetach
3@ += 2.0
9@ = 30.0
jump @HookDetachLoad

:HookSideDetach
3@ -= 0.75
02F7: 5@ = sinus 4@ // cosine swapped with sinus
02F6: 6@ = cosine 4@ // sinus swapped with cosine
005B: 1@ += 5@
005B: 2@ += 6@
5@ *= 5.0
6@ *= 5.0
005B: 1@ += 6@
005B: 2@ += 5@
9@ = -90.0

:HookDetachLoad
Model.Load(#delhook)
038B: load_requested_models
while not Model.Available(#delhook)
   wait 0
end
10@ = Object.Create(#delhook, 1@, 2@, 3@)
0453: object 10@ set_rotation 9@ 0.0 4@
0382: set_object 10@ collision_detection 1
0392: object 10@ toggle_in_moving_list 1

:HookDetachDestroy
wait 10
04C4: create_coordinate 11@ 12@ 13@ from_actor $PLAYER_ACTOR offset 0.0 1.2 0.0
0509: 14@ = distance between point 1@ 2@ and point 11@ 12@
if or
    $SET_TIME == 1
    14@ > 100.0 // floating-point values
jf @HookDetachDestroy
Object.Destroy(10@)
end_thread

// ======================================================================================================
:Hook
if
80DC:   not player $PLAYER_CHAR driving 0@
else_jump @HookReturn

0B10: 7@ = 1@ AND $HOOK_BIT
// Hook check
if or
    003B: 7@ == $HOOK_SIDE_BIT
    003B: 7@ == $HOOK_UP_BIT
else_jump @HookReturn
0407: create_coordinate 2@ 3@ 4@ from_car 0@ offset 1.5 0.0 0.0
if and
    00E1:   key_pressed 0 4
    00F6:   player $PLAYER_CHAR 0 2@ 3@ 4@ radius 1.0 1.0 2.0
else_jump @HookReturn

// Put hook up or down
0B10: 1@ = 1@ AND $HOOK_BITMASK
if
    003B: 7@ == $HOOK_SIDE_BIT
then
    0B11: 1@ = 1@ OR $HOOK_UP_BIT
else
    0B11: 1@ = 1@ OR $HOOK_SIDE_BIT
end
create_thread @SetVariation 0@ 1@
wait 250

:HookReturn
return

:FluxCapacitorAnimation
for 7@ = 0 to 6 step 1
    3F11: set_car 0@ component "flux" index 7@ visible 0
end
0B10: 7@ = 1@ AND $TC_BIT
0B10: 8@ = 1@ AND $TC_FRIED_BIT
if and
    not 7@ == 0    // Time circuits on
    8@ == 0  // Time circuits ok
then
    if
        16@ >= 540
    then
        16@ = 0
    end
    0085: 7@ = 16@
    7@ /= 90
    7@ += 1
    3F11: set_car 0@ component "flux" index 7@ visible 1
end
return

